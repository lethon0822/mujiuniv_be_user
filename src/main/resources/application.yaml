constants:
  file:
    directory: D:/student/mujiuni/profile # 그대로 유지

  open-feign:
    function: mujiuniv-function


  jwt:
    issuer: green@green.com
    schema: Bearer
    bearer-format: JWT

    claim-key: signedUser
    header-key: Authorization
    secret-key: DaeguGreenArtAcademyClass502RoomForJavaSpringBootFighting

    domain: greenart.n-e.kr

    access-token-cookie-name: access-token
    access-token-cookie-path: /
    access-token-cookie-validity-seconds: 3_000 # 30 mins (s): 60 * 50
    access-token-validity-milliseconds: 3_000_000 # 30 mins (ms): 60 * 50 * 1000

    refresh-token-cookie-name: refresh-token
    refresh-token-cookie-path: /api/account/reissue # 이 주소로만 reissue가 날아옴 다른 주소로 하면 안됨!!
    refresh-token-cookie-validity-seconds: 1_296_000 # 15 days (s): 60 * 60 * 24 * 15
    refresh-token-validity-milliseconds: 1_296_000_000 # 15 days (ms): 60 * 60 * 24 * 15 * 1000


spring:
  application:
    name: mujiuniv-user # [중요]유레카를 사용할시 이 이름을 사용한다

  datasource:
    # log4jdbc 사용 중이므로 DriverSpy + jdbc:log4jdbc: 형태 유지
    url: jdbc:log4jdbc:mariadb://192.168.0.39/final_project_user?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Seoul

    username: green3
    password: figma502
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy

    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000       # 5분
      max-lifetime: 1800000      # 30분
      connection-timeout: 30000  # 30초

  jpa:
    database: mysql
    defer-datasource-initialization: true # 중요. JPA 테이블 생성 이후 data.sql
    hibernate:
      ddl-auto: update #데이블은 없는데 entity가 존재하면 create 한다.
#       ddl-auto: create #프로젝트 실행시마다 테이블을 모두 drop 후 create 한다.
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
          batch_size: 20
        format_sql: true # 쿼리문 로그를 찍어줄 때 보기 편하게 포맷팅
        order_updates: true
        show_sql: true

  jackson:
    time-zone: Asia/Seoul
    date-format: yyyy-MM-dd HH:mm:ss

  servlet:
    multipart:
      max-file-size: 20MB

  data:
    redis:
      host: localhost
      port: 6379
      password: green502



mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
    default-statement-timeout: 10
  # resources 폴더 기준 classpath 접두사로 명시하는 것이 안전
  mapper-locations: classpath:/mappers/**/*.xml

mail:
  smtp:
    host: "smtp.gmail.com"
    username: "mujiuniv@gmail.com"
    password: "dqknokdqkusfndls"
    port: 587
    properties:
      mail:
        smtp:
          ssl:
            trust: "smtp.gmail.com"
          auth: true
          starttls:
            enable: true
          connectiontimeout: 3000
          timeout: 3000
          writetimeout: 3000



eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8888/eureka
#    instance:
#      instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}}

server:
  port: 8081
  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
#server:
#  port: 8080
#  servlet:
#    session:
#      cookie:
#        same-site: lax   # Lax / Strict / None
#        path: /          # 기본은 /
#        # domain: localhost  # 특별히 필요 없으면 아예 빼두는 게 안전

logging:
  level:
    root: INFO
    # 패키지 로깅(네 프로젝트 패키지명으로 조정)
    com.rainbowuniv: DEBUG
    org.mybatis: DEBUG
    # log4jdbc 카테고리
    jdbc.sqlonly: DEBUG     # 실행된 SQL
    jdbc.sqltiming: INFO    # 실행시간 포함
    jdbc.audit: OFF
    jdbc.resultset: OFF
    jdbc.connection: OFF

